/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 *
 * This file is automatically generated from the OpenAPI specification.
 * To regenerate, run: yarn generate-schemas
 *
 * Source: https://sweepsteak-production--sweepsteak-64dd0.europe-west4.hosted.app/openapi.json
 * Generated: 2025-10-24T10:59:59.415Z
 *
 * Note: Schemas are intentionally relaxed (optional fields, flexible types)
 * to handle real-world API responses gracefully.
 */

import { z } from 'zod';

// User
export const userSchema = z.object({
  id: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  bio: z.string().optional(),
  profile_picture: z.string().optional(),
  phone_number: z.string().optional(),
  game_stop_id: z.string().optional(),
  is_auth_verified: z.boolean().optional(),
  is_identity_verified: z.boolean().optional(),
  deposit_limit: z.number().optional(),
  betting_limit: z.number().optional(),
  payment_id: z.string().optional(),
  current_balance: z.number().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export type User = z.infer<typeof userSchema>;

// Tournament
export const tournamentSchema = z.object({
  id: z.string(),
  name: z.string(),
  starts_at: z.string(),
  finishes_at: z.string(),
  description: z.string(),
  url: z.string(),
  cover_picture: z.string(),
  gallery: z.array(z.string()).optional().default([]),
  holes: z.array(z.object({})).optional().default([]),
  ads: z.array(z.object({})).optional().default([]),
  proposed_entry_fee: z.number(),
  maximum_cut_amount: z.number(),
  maximum_score_generator: z.number(),
  players: z.array(z.object({})).optional().default([]),
  created_at: z.string(),
  updated_at: z.string(),
});

export type Tournament = z.infer<typeof tournamentSchema>;

// Game
export const gameSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  entry_fee: z.number().optional(),
  contact_phone: z.string().optional(),
  contact_email: z.string().optional(),
  contact_visibility: z.boolean().optional(),
  max_participants: z.number().optional(),
  rewards: z.array(z.unknown()).optional().default([]),
  start_time: z.string().optional(),
  end_time: z.string().optional(),
  owner_id: z.string().optional(),
  tournament_id: z.string().optional(),
  user_id_list: z.array(z.unknown()).optional().default([]),
  is_featured: z.boolean().optional(),
  type: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export type Game = z.infer<typeof gameSchema>;

// Bet
export const betSchema = z.object({
  id: z.string().optional(),
  owner_id: z.string().optional(),
  game_id: z.string().optional(),
  team_id: z.string().optional(),
  amount: z.number().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export type Bet = z.infer<typeof betSchema>;

// Transaction
export const transactionSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  value: z.string().optional(),
  type: z.string().optional(),
  charge_id: z.string().optional(),
  user_id: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export type Transaction = z.infer<typeof transactionSchema>;

// API Response Wrappers
export const usersResponseSchema = z.object({
  data: z.array(userSchema),
});

export type UsersResponse = z.infer<typeof usersResponseSchema>;

export const tournamentsResponseSchema = z.object({
  data: z.array(tournamentSchema),
});

export type TournamentsResponse = z.infer<typeof tournamentsResponseSchema>;

export const gamesResponseSchema = z.object({
  data: z.array(gameSchema),
});

export type GamesResponse = z.infer<typeof gamesResponseSchema>;

export const betsResponseSchema = z.object({
  data: z.array(betSchema),
});

export type BetsResponse = z.infer<typeof betsResponseSchema>;

export const transactionsResponseSchema = z.object({
  data: z.array(transactionSchema),
});

export type TransactionsResponse = z.infer<typeof transactionsResponseSchema>;
